-- ============================================================
-- 1. Create table table_sept
-- ============================================================

CREATE TABLE table_sept (
    year_ TEXT,
    type_product TEXT,
    cod_product TEXT,
    product TEXT,
    quantity NUMERIC,
    unit_measure TEXT,
    loading_departure_date TEXT,
    hour_loading_departure_date TEXT,
    unloading_departure_date TEXT,
    hour_unloading_departure_date TEXT,
    code_load TEXT,
    load_ TEXT,
    code_unload TEXT,
    unload TEXT,
    travel_hours NUMERIC,
    loading_waiting_hours NUMERIC,
    hours_load NUMERIC,
    unloading_waiting_hours NUMERIC,
    hours_unload NUMERIC,
    agreed_value BIGINT,
    payed_value BIGINT,
    trip_remittance_quantity INTEGER,
    company TEXT,
    plate TEXT,
    configuration_ TEXT,
    id_driver TEXT,
    gps TEXT
);

-- ============================================================
-- 2. Load data from TXT file
-- ============================================================

COPY table_sept
FROM '/Users/mac/Documents/Thesis/Sept.txt'
WITH (
    FORMAT csv,
    DELIMITER '|',
    HEADER true
);

-- ============================================================
-- 3. Clean date fields: replace special characters and spaces
-- ============================================================

UPDATE table_sept
SET loading_departure_date =
    TRIM(REPLACE(REPLACE(REPLACE(loading_departure_date, '-', '/'), '\\','/'), ' ', ''))
WHERE loading_departure_date IS NOT NULL;

UPDATE table_sept
SET unloading_departure_date =
    TRIM(REPLACE(REPLACE(REPLACE(unloading_departure_date, '-', '/'), '\\','/'), ' ', ''))
WHERE unloading_departure_date IS NOT NULL;

-- ============================================================
-- 4. Add temporary DATE columns for conversion
-- ============================================================

ALTER TABLE table_sept ADD COLUMN departure_date DATE;
ALTER TABLE table_sept ADD COLUMN arrival_date DATE;

-- ============================================================
-- 5. Convert text to DATE (dd/mm/yy format)
-- ============================================================

UPDATE table_sept
SET departure_date = TO_DATE(loading_departure_date, 'DD/MM/YY')
WHERE loading_departure_date ~ '^\d{2}/\d{2}/\d{2}$';

UPDATE table_sept
SET arrival_date = TO_DATE(unloading_departure_date, 'DD/MM/YY')
WHERE unloading_departure_date ~ '^\d{2}/\d{2}/\d{2}$';

-- ============================================================
-- 6. Clean hour formats (pad with zeros and enforce HH:MM)
-- ============================================================

UPDATE table_sept
SET hour_loading_departure_date = LPAD(TRIM(REPLACE(hour_loading_departure_date, ' ','')), 5, '0')
WHERE hour_loading_departure_date !~ '^\s*\d{1,2}:\d{2}\s*$';

UPDATE table_sept
SET hour_unloading_departure_date = LPAD(TRIM(REPLACE(hour_unloading_departure_date,' ','')), 5, '0')
WHERE hour_unloading_departure_date !~ '^\s*\d{1,2}:\d{2}\s*$';

-- ============================================================
-- 7. Replace original date columns with cleaned DATE columns
-- ============================================================

ALTER TABLE table_sept DROP COLUMN loading_departure_date;
ALTER TABLE table_sept RENAME COLUMN departure_date TO loading_departure_date;

ALTER TABLE table_sept DROP COLUMN unloading_departure_date;
ALTER TABLE table_sept RENAME COLUMN arrival_date TO unloading_departure_date;

-- ============================================================
-- 8. Convert hour columns to TIME type
-- ============================================================

ALTER TABLE table_sept
ALTER COLUMN hour_loading_departure_date TYPE TIME
USING hour_loading_departure_date::TIME;

ALTER TABLE table_sept
ALTER COLUMN hour_unloading_departure_date TYPE TIME
USING hour_unloading_departure_date::TIME;

-- ============================================================
-- 9. Preview first 10 records
-- ============================================================

SELECT * FROM table_sept LIMIT 10;

-- ============================================================
-- 10. Companies and license plates traveling to Yumbo, Barbosa, Bogotá
-- ============================================================

WITH normalized_loads AS (
    SELECT
        company,
        plate,
        CASE
            WHEN load_ ILIKE '%yumbo%' THEN 'Yumbo'
            WHEN load_ ILIKE '%barbosa%' THEN 'Barbosa'
            WHEN load_ ILIKE '%bogota%' OR load_ ILIKE '%bogotá%' THEN 'Bogotá'
        END AS origin_city
    FROM table_sept
    WHERE load_ ILIKE ANY (ARRAY['%yumbo%', '%barbosa%', '%bogota%', '%bogotá%'])
),
plates_with_3_cities AS (
    SELECT company, plate
    FROM normalized_loads
    WHERE origin_city IS NOT NULL
    GROUP BY company, plate
    HAVING COUNT(DISTINCT origin_city) = 3
),
trucks_per_company AS (
    SELECT company, COUNT(DISTINCT plate) AS total_trucks
    FROM plates_with_3_cities
    GROUP BY company
)
SELECT
    v.company,
    v.plate,
    COUNT(CASE WHEN c.origin_city = 'Yumbo' THEN 1 END) AS trips_from_yumbo,
    COUNT(CASE WHEN c.origin_city = 'Barbosa' THEN 1 END) AS trips_from_barbosa,
    COUNT(CASE WHEN c.origin_city = 'Bogotá' THEN 1 END) AS trips_from_bogota,
    e.total_trucks
FROM plates_with_3_cities v
JOIN normalized_loads c
    ON v.company = c.company AND v.plate = c.plate
JOIN trucks_per_company e
    ON v.company = e.company
GROUP BY v.company, v.plate, e.total_trucks
ORDER BY e.total_trucks DESC, v.company, v.plate;

-- ============================================================
-- 11. Average loading hours and total loads for company 01959 in 3 cities
-- ============================================================

WITH filtered_loads AS (
    SELECT
        plate,
        load_,
        hours_load,
        quantity,
        CASE
            WHEN load_ ILIKE '%yumbo%' THEN 'Yumbo'
            WHEN load_ ILIKE '%barbosa%' THEN 'Barbosa'
            WHEN load_ ILIKE '%bogota%' OR load_ ILIKE '%bogotá%' THEN 'Bogotá'
        END AS normalized_city
    FROM table_sept
    WHERE company ILIKE '%01959%'
      AND load_ ILIKE ANY (ARRAY['%yumbo%', '%barbosa%', '%bogota%', '%bogotá%'])
),
plates_with_3_cities AS (
    SELECT plate
    FROM filtered_loads
    WHERE normalized_city IS NOT NULL
    GROUP BY plate
    HAVING COUNT(DISTINCT normalized_city) = 3
)
SELECT
    cf.plate,
    SUM(cf.quantity) AS total_quantity,
    ROUND(AVG(cf.hours_load), 2) AS avg_loading_hours
FROM filtered_loads cf
JOIN plates_with_3_cities p3c
    ON cf.plate = p3c.plate
GROUP BY cf.plate
ORDER BY total_quantity DESC;

-- ============================================================
-- 12. Detailed trips for plates that reach 3 cities (company 01959)
-- ============================================================

WITH filtered_loads AS (
    SELECT
        plate,
        product,
        load_,
        hours_load,
        quantity,
        agreed_value,
        payed_value,
        code_load,
        CASE
            WHEN load_ ILIKE '%yumbo%' THEN 'Yumbo'
            WHEN load_ ILIKE '%barbosa%' THEN 'Barbosa'
            WHEN load_ ILIKE '%bogota%' OR load_ ILIKE '%bogotá%' THEN 'Bogotá'
        END AS normalized_city
    FROM table_sept
    WHERE company ILIKE '%01959%'
      AND load_ ILIKE ANY (ARRAY['%yumbo%', '%barbosa%', '%bogota%', '%bogotá%'])
),
plates_with_3_cities AS (
    SELECT plate
    FROM filtered_loads
    WHERE normalized_city IS NOT NULL
    GROUP BY plate
    HAVING COUNT(DISTINCT normalized_city) = 3
)
SELECT
    cf.code_load,
    cf.plate,
    cf.product,
    cf.load_,
    cf.hours_load,
    cf.quantity,
    cf.agreed_value,
    cf.payed_value
FROM filtered_loads cf
JOIN plates_with_3_cities p3c
  ON cf.plate = p3c.plate
ORDER BY cf.plate, cf.quantity DESC, cf.load_;

-- ============================================================
-- 13. Plates with 3 cities and total quantity for company 01959
-- ============================================================

WITH filtered_loads AS (
    SELECT
        plate,
        load_,
        hours_load,
        quantity,
        CASE
            WHEN load_ ILIKE '%yumbo%' THEN 'Yumbo'
            WHEN load_ ILIKE '%barbosa%' THEN 'Barbosa'
            WHEN load_ ILIKE '%bogota%' OR load_ ILIKE '%bogotá%' THEN 'Bogotá'
        END AS normalized_city
    FROM table_sept
    WHERE company ILIKE '%01959%'
      AND load_ ILIKE ANY (ARRAY['%yumbo%', '%barbosa%', '%bogota%', '%bogotá%'])
),
plates_with_3_cities AS (
    SELECT plate, SUM(quantity) AS total_quantity
    FROM filtered_loads
    WHERE normalized_city IS NOT NULL
    GROUP BY plate
    HAVING COUNT(DISTINCT normalized_city) = 3
)
SELECT plate, total_quantity
FROM plates_with_3_cities
ORDER BY total_quantity DESC;

-- ============================================================
-- 14. Average loading hours for one specific plate (1537522) by city
-- ============================================================

SELECT AVG(hours_load) AS avg_load_hours
FROM table_sept
WHERE load_ ILIKE '%Yumbo%' AND plate ILIKE '%1537522%'
GROUP BY plate;

SELECT AVG(hours_load) AS avg_load_hours
FROM table_sept
WHERE load_ ILIKE '%Barbosa%' AND plate ILIKE '%1537522%'
GROUP BY plate;

SELECT AVG(hours_load) AS avg_load_hours
FROM table_sept
WHERE load_ ILIKE '%Bogota%' AND plate ILIKE '%1537522%'
GROUP BY plate;

-- ============================================================
-- 15. Count of trips for company 01959
-- ============================================================

SELECT COUNT(*) AS total_trips
FROM table_sept
WHERE company ILIKE '%01959%';
